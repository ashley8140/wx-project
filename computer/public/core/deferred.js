var Deferred = function(callback){    var def = new DeferredClass();    if(callback){        callback(def);    }    return def;};var DeferredClass = function(){    var state = 'pending',        value,        doneQueue = [],        failQueue = [],        thenQueue = [];    var pushCallback = function(isDone, cb){        if(!cb) return;        if(state !== 'pending'){            cb(value);        }else{            (isDone ? doneQueue : failQueue).push(cb);        }    };    var settle = function(){        var targetQueue = state === 'resolved' ? doneQueue : failQueue;        while(targetQueue.length){            targetQueue.shift()(value);        }        doneQueue = failQueue = [];        if(thenQueue.length){            thenQueue[0](value, state === 'resolved');        }    };    this.resolve = function(data){        if( state !== 'pending' ) return this;        state = 'resolved';        value = data;        settle();        return this;    };    this.reject = function(data){        if( state !== 'pending' ) return this;        state = 'rejected';        value = data;        settle();        return this;    };    this.then= function(cb){        var def = Deferred();        var done = function(a, b){            var ret = cb(a, b) || a;            if(ret && typeof ret['then'] === 'function' ){                ret.then(function(a, b){                    def[ b ? 'resolve' : 'reject'](a);                });            }else{                def[ b ? 'resolve' : 'reject'](ret);            }        };        if(state !== 'pending'){            done(value, state === 'resolved')        }else{            thenQueue.push(done);        }        return def;    };    this.done = function(cb){        pushCallback(true, cb);    };    this.fail = function(cb){        pushCallback(false, cb);    }};Deferred.when = function(){    var def = new Deferred();    var args = Array.prototype.slice.call(arguments);    var len = args.length, count = len;    var i = 0,result = [];    var resolver = function (i){        return function(value, isResolved){            result[i] = [value, isResolved];            if(--count === 0){                def.resolve(result);                resolver = def = args = result = null;            }        }    };    for(; i < len; i++){        args[i].then(resolver(i));    }    return def;};module.exports = Deferred;